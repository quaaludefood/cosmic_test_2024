
Question 1.2: If your Bash script contains asynchronized commands, such as IBM LSF or Slurm job schedulers, 
how to compose your script to make sure everything works well and exits with a proper code?



Appending the process with the '&' symbol will cause it to run in the background, i.e.

mycommand &

The pid of the last background command executed is captured in the $! variable, i.e.

mycommand &
my_pif=$!

The ps command outputs the processes currently running. You can check if the pid of the background command is still running by querying the output 
of the ps command, i.e. 

ps | grep " $my_pid " 

(note the space surrounding the $my_pid variable to avoid capturing the grep process as part of the output!)

The $? variable captures the exit code of the last process to complete, it will be 0 if the process exited without errors. An example of a script to 
check the exit code of an asynchronous process could be:

mycommand &
my_pid=$!

while   ps | grep " $my_pid "
do
    echo $my_pid is still in the ps output. Must still be running.
    sleep 3
done

echo The process is done.
wait $my_pid
# Get the exit code from the $? variable 
my_status=$?
echo The exit status of the process was $my_status